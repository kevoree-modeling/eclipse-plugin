/*
 * generated by Xtext
 */
grammar InternalMetaModel;

options {
	superClass=AbstractInternalContentAssistParser;
	
}

@lexer::header {
package org.kevoree.modeling.ui.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package org.kevoree.modeling.ui.contentassist.antlr.internal; 

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.DFA;
import org.kevoree.modeling.services.MetaModelGrammarAccess;

}

@parser::members {
 
 	private MetaModelGrammarAccess grammarAccess;
 	
    public void setGrammarAccess(MetaModelGrammarAccess grammarAccess) {
    	this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected Grammar getGrammar() {
    	return grammarAccess.getGrammar();
    }
    
    @Override
    protected String getValueForTokenName(String tokenName) {
    	return tokenName;
    }

}




// Entry rule entryRuleModel
entryRuleModel 
:
{ before(grammarAccess.getModelRule()); }
	 ruleModel
{ after(grammarAccess.getModelRule()); } 
	 EOF 
;

// Rule Model
ruleModel
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getModelAccess().getGroup()); }
(rule__Model__Group__0)
{ after(grammarAccess.getModelAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuletypeName
entryRuletypeName 
:
{ before(grammarAccess.getTypeNameRule()); }
	 ruletypeName
{ after(grammarAccess.getTypeNameRule()); } 
	 EOF 
;

// Rule typeName
ruletypeName
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getTypeNameAccess().getGroup()); }
(rule__TypeName__Group__0)
{ after(grammarAccess.getTypeNameAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuledecl
entryRuledecl 
:
{ before(grammarAccess.getDeclRule()); }
	 ruledecl
{ after(grammarAccess.getDeclRule()); } 
	 EOF 
;

// Rule decl
ruledecl
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getDeclAccess().getAlternatives()); }
(rule__Decl__Alternatives)
{ after(grammarAccess.getDeclAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleenumDeclr
entryRuleenumDeclr 
:
{ before(grammarAccess.getEnumDeclrRule()); }
	 ruleenumDeclr
{ after(grammarAccess.getEnumDeclrRule()); } 
	 EOF 
;

// Rule enumDeclr
ruleenumDeclr
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getEnumDeclrAccess().getGroup()); }
(rule__EnumDeclr__Group__0)
{ after(grammarAccess.getEnumDeclrAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleclassDeclr
entryRuleclassDeclr 
:
{ before(grammarAccess.getClassDeclrRule()); }
	 ruleclassDeclr
{ after(grammarAccess.getClassDeclrRule()); } 
	 EOF 
;

// Rule classDeclr
ruleclassDeclr
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getClassDeclrAccess().getGroup()); }
(rule__ClassDeclr__Group__0)
{ after(grammarAccess.getClassDeclrAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleclassElemDeclr
entryRuleclassElemDeclr 
:
{ before(grammarAccess.getClassElemDeclrRule()); }
	 ruleclassElemDeclr
{ after(grammarAccess.getClassElemDeclrRule()); } 
	 EOF 
;

// Rule classElemDeclr
ruleclassElemDeclr
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getClassElemDeclrAccess().getAlternatives()); }
(rule__ClassElemDeclr__Alternatives)
{ after(grammarAccess.getClassElemDeclrAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleclassParentDeclr
entryRuleclassParentDeclr 
:
{ before(grammarAccess.getClassParentDeclrRule()); }
	 ruleclassParentDeclr
{ after(grammarAccess.getClassParentDeclrRule()); } 
	 EOF 
;

// Rule classParentDeclr
ruleclassParentDeclr
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getClassParentDeclrAccess().getGroup()); }
(rule__ClassParentDeclr__Group__0)
{ after(grammarAccess.getClassParentDeclrAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleattributeDeclaration
entryRuleattributeDeclaration 
:
{ before(grammarAccess.getAttributeDeclarationRule()); }
	 ruleattributeDeclaration
{ after(grammarAccess.getAttributeDeclarationRule()); } 
	 EOF 
;

// Rule attributeDeclaration
ruleattributeDeclaration
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getAttributeDeclarationAccess().getGroup()); }
(rule__AttributeDeclaration__Group__0)
{ after(grammarAccess.getAttributeDeclarationAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleattributeType
entryRuleattributeType 
:
{ before(grammarAccess.getAttributeTypeRule()); }
	 ruleattributeType
{ after(grammarAccess.getAttributeTypeRule()); } 
	 EOF 
;

// Rule attributeType
ruleattributeType
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getAttributeTypeAccess().getAlternatives()); }
(rule__AttributeType__Alternatives)
{ after(grammarAccess.getAttributeTypeAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulereferenceDeclaration
entryRulereferenceDeclaration 
:
{ before(grammarAccess.getReferenceDeclarationRule()); }
	 rulereferenceDeclaration
{ after(grammarAccess.getReferenceDeclarationRule()); } 
	 EOF 
;

// Rule referenceDeclaration
rulereferenceDeclaration
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getReferenceDeclarationAccess().getGroup()); }
(rule__ReferenceDeclaration__Group__0)
{ after(grammarAccess.getReferenceDeclarationAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuledependencyDeclaration
entryRuledependencyDeclaration 
:
{ before(grammarAccess.getDependencyDeclarationRule()); }
	 ruledependencyDeclaration
{ after(grammarAccess.getDependencyDeclarationRule()); } 
	 EOF 
;

// Rule dependencyDeclaration
ruledependencyDeclaration
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getDependencyDeclarationAccess().getGroup()); }
(rule__DependencyDeclaration__Group__0)
{ after(grammarAccess.getDependencyDeclarationAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleinputDeclaration
entryRuleinputDeclaration 
:
{ before(grammarAccess.getInputDeclarationRule()); }
	 ruleinputDeclaration
{ after(grammarAccess.getInputDeclarationRule()); } 
	 EOF 
;

// Rule inputDeclaration
ruleinputDeclaration
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getInputDeclarationAccess().getGroup()); }
(rule__InputDeclaration__Group__0)
{ after(grammarAccess.getInputDeclarationAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleoutputDeclaration
entryRuleoutputDeclaration 
:
{ before(grammarAccess.getOutputDeclarationRule()); }
	 ruleoutputDeclaration
{ after(grammarAccess.getOutputDeclarationRule()); } 
	 EOF 
;

// Rule outputDeclaration
ruleoutputDeclaration
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getOutputDeclarationAccess().getGroup()); }
(rule__OutputDeclaration__Group__0)
{ after(grammarAccess.getOutputDeclarationAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleannotationDeclr
entryRuleannotationDeclr 
:
{ before(grammarAccess.getAnnotationDeclrRule()); }
	 ruleannotationDeclr
{ after(grammarAccess.getAnnotationDeclrRule()); } 
	 EOF 
;

// Rule annotationDeclr
ruleannotationDeclr
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getAnnotationDeclrAccess().getGroup()); }
(rule__AnnotationDeclr__Group__0)
{ after(grammarAccess.getAnnotationDeclrAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}




rule__Decl__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDeclAccess().getEnumDeclrParserRuleCall_0()); }
	ruleenumDeclr
{ after(grammarAccess.getDeclAccess().getEnumDeclrParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getDeclAccess().getClassDeclrParserRuleCall_1()); }
	ruleclassDeclr
{ after(grammarAccess.getDeclAccess().getClassDeclrParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ClassElemDeclr__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getClassElemDeclrAccess().getAttributeDeclarationParserRuleCall_0()); }
	ruleattributeDeclaration
{ after(grammarAccess.getClassElemDeclrAccess().getAttributeDeclarationParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getClassElemDeclrAccess().getReferenceDeclarationParserRuleCall_1()); }
	rulereferenceDeclaration
{ after(grammarAccess.getClassElemDeclrAccess().getReferenceDeclarationParserRuleCall_1()); }
)

    |(
{ before(grammarAccess.getClassElemDeclrAccess().getDependencyDeclarationParserRuleCall_2()); }
	ruledependencyDeclaration
{ after(grammarAccess.getClassElemDeclrAccess().getDependencyDeclarationParserRuleCall_2()); }
)

    |(
{ before(grammarAccess.getClassElemDeclrAccess().getInputDeclarationParserRuleCall_3()); }
	ruleinputDeclaration
{ after(grammarAccess.getClassElemDeclrAccess().getInputDeclarationParserRuleCall_3()); }
)

    |(
{ before(grammarAccess.getClassElemDeclrAccess().getOutputDeclarationParserRuleCall_4()); }
	ruleoutputDeclaration
{ after(grammarAccess.getClassElemDeclrAccess().getOutputDeclarationParserRuleCall_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AttributeType__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAttributeTypeAccess().getStringKeyword_0()); }

	'String' 

{ after(grammarAccess.getAttributeTypeAccess().getStringKeyword_0()); }
)

    |(
{ before(grammarAccess.getAttributeTypeAccess().getDoubleKeyword_1()); }

	'Double' 

{ after(grammarAccess.getAttributeTypeAccess().getDoubleKeyword_1()); }
)

    |(
{ before(grammarAccess.getAttributeTypeAccess().getLongKeyword_2()); }

	'Long' 

{ after(grammarAccess.getAttributeTypeAccess().getLongKeyword_2()); }
)

    |(
{ before(grammarAccess.getAttributeTypeAccess().getContinuousKeyword_3()); }

	'Continuous' 

{ after(grammarAccess.getAttributeTypeAccess().getContinuousKeyword_3()); }
)

    |(
{ before(grammarAccess.getAttributeTypeAccess().getIntKeyword_4()); }

	'Int' 

{ after(grammarAccess.getAttributeTypeAccess().getIntKeyword_4()); }
)

    |(
{ before(grammarAccess.getAttributeTypeAccess().getBoolKeyword_5()); }

	'Bool' 

{ after(grammarAccess.getAttributeTypeAccess().getBoolKeyword_5()); }
)

    |(
{ before(grammarAccess.getAttributeTypeAccess().getTypeNameParserRuleCall_6()); }
	ruletypeName
{ after(grammarAccess.getAttributeTypeAccess().getTypeNameParserRuleCall_6()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ReferenceDeclaration__Alternatives_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getReferenceDeclarationAccess().getRefKeyword_0_0()); }

	'ref' 

{ after(grammarAccess.getReferenceDeclarationAccess().getRefKeyword_0_0()); }
)

    |(
{ before(grammarAccess.getReferenceDeclarationAccess().getRefKeyword_0_1()); }

	'ref*' 

{ after(grammarAccess.getReferenceDeclarationAccess().getRefKeyword_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AnnotationDeclr__Alternatives_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAnnotationDeclrAccess().getINTTerminalRuleCall_2_0()); }
	RULE_INT
{ after(grammarAccess.getAnnotationDeclrAccess().getINTTerminalRuleCall_2_0()); }
)

    |(
{ before(grammarAccess.getAnnotationDeclrAccess().getSTRINGTerminalRuleCall_2_1()); }
	RULE_STRING
{ after(grammarAccess.getAnnotationDeclrAccess().getSTRINGTerminalRuleCall_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}



rule__Model__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Model__Group__0__Impl
	rule__Model__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModelAccess().getAnnotationsAssignment_0()); }
(rule__Model__AnnotationsAssignment_0)*
{ after(grammarAccess.getModelAccess().getAnnotationsAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Model__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Model__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModelAccess().getDeclarationsAssignment_1()); }
(rule__Model__DeclarationsAssignment_1)*
{ after(grammarAccess.getModelAccess().getDeclarationsAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__TypeName__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TypeName__Group__0__Impl
	rule__TypeName__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__TypeName__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeNameAccess().getIDTerminalRuleCall_0()); }
	RULE_ID
{ after(grammarAccess.getTypeNameAccess().getIDTerminalRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TypeName__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TypeName__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__TypeName__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeNameAccess().getGroup_1()); }
(rule__TypeName__Group_1__0)*
{ after(grammarAccess.getTypeNameAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__TypeName__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TypeName__Group_1__0__Impl
	rule__TypeName__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__TypeName__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeNameAccess().getFullStopKeyword_1_0()); }

	'.' 

{ after(grammarAccess.getTypeNameAccess().getFullStopKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TypeName__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TypeName__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__TypeName__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeNameAccess().getIDTerminalRuleCall_1_1()); }
	RULE_ID
{ after(grammarAccess.getTypeNameAccess().getIDTerminalRuleCall_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__EnumDeclr__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EnumDeclr__Group__0__Impl
	rule__EnumDeclr__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__EnumDeclr__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEnumDeclrAccess().getEnumKeyword_0()); }

	'enum' 

{ after(grammarAccess.getEnumDeclrAccess().getEnumKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__EnumDeclr__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EnumDeclr__Group__1__Impl
	rule__EnumDeclr__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__EnumDeclr__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEnumDeclrAccess().getTypeNameParserRuleCall_1()); }
	ruletypeName
{ after(grammarAccess.getEnumDeclrAccess().getTypeNameParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__EnumDeclr__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EnumDeclr__Group__2__Impl
	rule__EnumDeclr__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__EnumDeclr__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEnumDeclrAccess().getLeftCurlyBracketKeyword_2()); }

	'{' 

{ after(grammarAccess.getEnumDeclrAccess().getLeftCurlyBracketKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__EnumDeclr__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EnumDeclr__Group__3__Impl
	rule__EnumDeclr__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__EnumDeclr__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEnumDeclrAccess().getIDTerminalRuleCall_3()); }
	RULE_ID
{ after(grammarAccess.getEnumDeclrAccess().getIDTerminalRuleCall_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__EnumDeclr__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EnumDeclr__Group__4__Impl
	rule__EnumDeclr__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__EnumDeclr__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEnumDeclrAccess().getGroup_4()); }
(rule__EnumDeclr__Group_4__0)*
{ after(grammarAccess.getEnumDeclrAccess().getGroup_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__EnumDeclr__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EnumDeclr__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__EnumDeclr__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEnumDeclrAccess().getRightCurlyBracketKeyword_5()); }

	'}' 

{ after(grammarAccess.getEnumDeclrAccess().getRightCurlyBracketKeyword_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}














rule__EnumDeclr__Group_4__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EnumDeclr__Group_4__0__Impl
	rule__EnumDeclr__Group_4__1
;
finally {
	restoreStackSize(stackSize);
}

rule__EnumDeclr__Group_4__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEnumDeclrAccess().getCommaKeyword_4_0()); }

	',' 

{ after(grammarAccess.getEnumDeclrAccess().getCommaKeyword_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__EnumDeclr__Group_4__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EnumDeclr__Group_4__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__EnumDeclr__Group_4__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEnumDeclrAccess().getIDTerminalRuleCall_4_1()); }
	RULE_ID
{ after(grammarAccess.getEnumDeclrAccess().getIDTerminalRuleCall_4_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ClassDeclr__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ClassDeclr__Group__0__Impl
	rule__ClassDeclr__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ClassDeclr__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getClassDeclrAccess().getClassKeyword_0()); }

	'class' 

{ after(grammarAccess.getClassDeclrAccess().getClassKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ClassDeclr__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ClassDeclr__Group__1__Impl
	rule__ClassDeclr__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ClassDeclr__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getClassDeclrAccess().getTypeNameParserRuleCall_1()); }
	ruletypeName
{ after(grammarAccess.getClassDeclrAccess().getTypeNameParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ClassDeclr__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ClassDeclr__Group__2__Impl
	rule__ClassDeclr__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ClassDeclr__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getClassDeclrAccess().getClassParentDeclrParserRuleCall_2()); }
(	ruleclassParentDeclr)?
{ after(grammarAccess.getClassDeclrAccess().getClassParentDeclrParserRuleCall_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ClassDeclr__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ClassDeclr__Group__3__Impl
	rule__ClassDeclr__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__ClassDeclr__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getClassDeclrAccess().getLeftCurlyBracketKeyword_3()); }

	'{' 

{ after(grammarAccess.getClassDeclrAccess().getLeftCurlyBracketKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ClassDeclr__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ClassDeclr__Group__4__Impl
	rule__ClassDeclr__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__ClassDeclr__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getClassDeclrAccess().getAnnotationsAssignment_4()); }
(rule__ClassDeclr__AnnotationsAssignment_4)*
{ after(grammarAccess.getClassDeclrAccess().getAnnotationsAssignment_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ClassDeclr__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ClassDeclr__Group__5__Impl
	rule__ClassDeclr__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__ClassDeclr__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getClassDeclrAccess().getDeclarationsAssignment_5()); }
(rule__ClassDeclr__DeclarationsAssignment_5)*
{ after(grammarAccess.getClassDeclrAccess().getDeclarationsAssignment_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ClassDeclr__Group__6
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ClassDeclr__Group__6__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ClassDeclr__Group__6__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getClassDeclrAccess().getRightCurlyBracketKeyword_6()); }

	'}' 

{ after(grammarAccess.getClassDeclrAccess().getRightCurlyBracketKeyword_6()); }
)

;
finally {
	restoreStackSize(stackSize);
}
















rule__ClassParentDeclr__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ClassParentDeclr__Group__0__Impl
	rule__ClassParentDeclr__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ClassParentDeclr__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getClassParentDeclrAccess().getExtendsKeyword_0()); }

	'extends' 

{ after(grammarAccess.getClassParentDeclrAccess().getExtendsKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ClassParentDeclr__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ClassParentDeclr__Group__1__Impl
	rule__ClassParentDeclr__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ClassParentDeclr__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getClassParentDeclrAccess().getTypeNameParserRuleCall_1()); }
	ruletypeName
{ after(grammarAccess.getClassParentDeclrAccess().getTypeNameParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ClassParentDeclr__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ClassParentDeclr__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ClassParentDeclr__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getClassParentDeclrAccess().getGroup_2()); }
(rule__ClassParentDeclr__Group_2__0)*
{ after(grammarAccess.getClassParentDeclrAccess().getGroup_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__ClassParentDeclr__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ClassParentDeclr__Group_2__0__Impl
	rule__ClassParentDeclr__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ClassParentDeclr__Group_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getClassParentDeclrAccess().getCommaKeyword_2_0()); }

	',' 

{ after(grammarAccess.getClassParentDeclrAccess().getCommaKeyword_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ClassParentDeclr__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ClassParentDeclr__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ClassParentDeclr__Group_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getClassParentDeclrAccess().getTypeNameParserRuleCall_2_1()); }
	ruletypeName
{ after(grammarAccess.getClassParentDeclrAccess().getTypeNameParserRuleCall_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__AttributeDeclaration__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AttributeDeclaration__Group__0__Impl
	rule__AttributeDeclaration__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AttributeDeclaration__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAttributeDeclarationAccess().getAttKeyword_0()); }

	'att' 

{ after(grammarAccess.getAttributeDeclarationAccess().getAttKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AttributeDeclaration__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AttributeDeclaration__Group__1__Impl
	rule__AttributeDeclaration__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__AttributeDeclaration__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAttributeDeclarationAccess().getIDTerminalRuleCall_1()); }
	RULE_ID
{ after(grammarAccess.getAttributeDeclarationAccess().getIDTerminalRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AttributeDeclaration__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AttributeDeclaration__Group__2__Impl
	rule__AttributeDeclaration__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__AttributeDeclaration__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAttributeDeclarationAccess().getColonKeyword_2()); }

	':' 

{ after(grammarAccess.getAttributeDeclarationAccess().getColonKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AttributeDeclaration__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AttributeDeclaration__Group__3__Impl
	rule__AttributeDeclaration__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__AttributeDeclaration__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAttributeDeclarationAccess().getAttributeTypeParserRuleCall_3()); }
	ruleattributeType
{ after(grammarAccess.getAttributeDeclarationAccess().getAttributeTypeParserRuleCall_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AttributeDeclaration__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AttributeDeclaration__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AttributeDeclaration__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAttributeDeclarationAccess().getAnnotationDeclrParserRuleCall_4()); }
(	ruleannotationDeclr)*
{ after(grammarAccess.getAttributeDeclarationAccess().getAnnotationDeclrParserRuleCall_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__ReferenceDeclaration__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ReferenceDeclaration__Group__0__Impl
	rule__ReferenceDeclaration__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ReferenceDeclaration__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getReferenceDeclarationAccess().getAlternatives_0()); }
(rule__ReferenceDeclaration__Alternatives_0)
{ after(grammarAccess.getReferenceDeclarationAccess().getAlternatives_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ReferenceDeclaration__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ReferenceDeclaration__Group__1__Impl
	rule__ReferenceDeclaration__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ReferenceDeclaration__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getReferenceDeclarationAccess().getIDTerminalRuleCall_1()); }
	RULE_ID
{ after(grammarAccess.getReferenceDeclarationAccess().getIDTerminalRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ReferenceDeclaration__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ReferenceDeclaration__Group__2__Impl
	rule__ReferenceDeclaration__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ReferenceDeclaration__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getReferenceDeclarationAccess().getColonKeyword_2()); }

	':' 

{ after(grammarAccess.getReferenceDeclarationAccess().getColonKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ReferenceDeclaration__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ReferenceDeclaration__Group__3__Impl
	rule__ReferenceDeclaration__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__ReferenceDeclaration__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getReferenceDeclarationAccess().getTypeNameParserRuleCall_3()); }
	ruletypeName
{ after(grammarAccess.getReferenceDeclarationAccess().getTypeNameParserRuleCall_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ReferenceDeclaration__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ReferenceDeclaration__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ReferenceDeclaration__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getReferenceDeclarationAccess().getAnnotationDeclrParserRuleCall_4()); }
(	ruleannotationDeclr)*
{ after(grammarAccess.getReferenceDeclarationAccess().getAnnotationDeclrParserRuleCall_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__DependencyDeclaration__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DependencyDeclaration__Group__0__Impl
	rule__DependencyDeclaration__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__DependencyDeclaration__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDependencyDeclarationAccess().getDependencyKeyword_0()); }

	'dependency' 

{ after(grammarAccess.getDependencyDeclarationAccess().getDependencyKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__DependencyDeclaration__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DependencyDeclaration__Group__1__Impl
	rule__DependencyDeclaration__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__DependencyDeclaration__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDependencyDeclarationAccess().getIDTerminalRuleCall_1()); }
	RULE_ID
{ after(grammarAccess.getDependencyDeclarationAccess().getIDTerminalRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__DependencyDeclaration__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DependencyDeclaration__Group__2__Impl
	rule__DependencyDeclaration__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__DependencyDeclaration__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDependencyDeclarationAccess().getColonKeyword_2()); }

	':' 

{ after(grammarAccess.getDependencyDeclarationAccess().getColonKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__DependencyDeclaration__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DependencyDeclaration__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__DependencyDeclaration__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDependencyDeclarationAccess().getTypeNameParserRuleCall_3()); }
	ruletypeName
{ after(grammarAccess.getDependencyDeclarationAccess().getTypeNameParserRuleCall_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__InputDeclaration__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__InputDeclaration__Group__0__Impl
	rule__InputDeclaration__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__InputDeclaration__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInputDeclarationAccess().getInputKeyword_0()); }

	'input' 

{ after(grammarAccess.getInputDeclarationAccess().getInputKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__InputDeclaration__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__InputDeclaration__Group__1__Impl
	rule__InputDeclaration__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__InputDeclaration__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInputDeclarationAccess().getIDTerminalRuleCall_1()); }
	RULE_ID
{ after(grammarAccess.getInputDeclarationAccess().getIDTerminalRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__InputDeclaration__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__InputDeclaration__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__InputDeclaration__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInputDeclarationAccess().getSTRINGTerminalRuleCall_2()); }
	RULE_STRING
{ after(grammarAccess.getInputDeclarationAccess().getSTRINGTerminalRuleCall_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__OutputDeclaration__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OutputDeclaration__Group__0__Impl
	rule__OutputDeclaration__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__OutputDeclaration__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOutputDeclarationAccess().getOutputKeyword_0()); }

	'output' 

{ after(grammarAccess.getOutputDeclarationAccess().getOutputKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__OutputDeclaration__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OutputDeclaration__Group__1__Impl
	rule__OutputDeclaration__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__OutputDeclaration__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOutputDeclarationAccess().getIDTerminalRuleCall_1()); }
	RULE_ID
{ after(grammarAccess.getOutputDeclarationAccess().getIDTerminalRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__OutputDeclaration__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OutputDeclaration__Group__2__Impl
	rule__OutputDeclaration__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__OutputDeclaration__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOutputDeclarationAccess().getColonKeyword_2()); }

	':' 

{ after(grammarAccess.getOutputDeclarationAccess().getColonKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__OutputDeclaration__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OutputDeclaration__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__OutputDeclaration__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOutputDeclarationAccess().getAttributeTypeParserRuleCall_3()); }
	ruleattributeType
{ after(grammarAccess.getOutputDeclarationAccess().getAttributeTypeParserRuleCall_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__AnnotationDeclr__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AnnotationDeclr__Group__0__Impl
	rule__AnnotationDeclr__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AnnotationDeclr__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAnnotationDeclrAccess().getWithKeyword_0()); }

	'with' 

{ after(grammarAccess.getAnnotationDeclrAccess().getWithKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AnnotationDeclr__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AnnotationDeclr__Group__1__Impl
	rule__AnnotationDeclr__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__AnnotationDeclr__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAnnotationDeclrAccess().getIDTerminalRuleCall_1()); }
	RULE_ID
{ after(grammarAccess.getAnnotationDeclrAccess().getIDTerminalRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AnnotationDeclr__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AnnotationDeclr__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AnnotationDeclr__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAnnotationDeclrAccess().getAlternatives_2()); }
(rule__AnnotationDeclr__Alternatives_2)?
{ after(grammarAccess.getAnnotationDeclrAccess().getAlternatives_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}









rule__Model__AnnotationsAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModelAccess().getAnnotationsAnnotationDeclrParserRuleCall_0_0()); }
	ruleannotationDeclr{ after(grammarAccess.getModelAccess().getAnnotationsAnnotationDeclrParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Model__DeclarationsAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModelAccess().getDeclarationsDeclParserRuleCall_1_0()); }
	ruledecl{ after(grammarAccess.getModelAccess().getDeclarationsDeclParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ClassDeclr__AnnotationsAssignment_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getClassDeclrAccess().getAnnotationsAnnotationDeclrParserRuleCall_4_0()); }
	ruleannotationDeclr{ after(grammarAccess.getClassDeclrAccess().getAnnotationsAnnotationDeclrParserRuleCall_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ClassDeclr__DeclarationsAssignment_5
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getClassDeclrAccess().getDeclarationsClassElemDeclrParserRuleCall_5_0()); }
	ruleclassElemDeclr{ after(grammarAccess.getClassDeclrAccess().getDeclarationsClassElemDeclrParserRuleCall_5_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;



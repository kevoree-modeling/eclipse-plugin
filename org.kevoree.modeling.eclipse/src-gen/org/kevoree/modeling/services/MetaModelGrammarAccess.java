/*
 * generated by Xtext
 */
package org.kevoree.modeling.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class MetaModelGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Model");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAnnotationsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAnnotationsAnnotationDeclrParserRuleCall_0_0 = (RuleCall)cAnnotationsAssignment_0.eContents().get(0);
		private final Assignment cDeclarationsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cDeclarationsDeclParserRuleCall_1_0 = (RuleCall)cDeclarationsAssignment_1.eContents().get(0);
		
		//Model:
		//	annotations+=annotationDeclr* declarations+=decl*;
		@Override public ParserRule getRule() { return rule; }

		//annotations+=annotationDeclr* declarations+=decl*
		public Group getGroup() { return cGroup; }

		//annotations+=annotationDeclr*
		public Assignment getAnnotationsAssignment_0() { return cAnnotationsAssignment_0; }

		//annotationDeclr
		public RuleCall getAnnotationsAnnotationDeclrParserRuleCall_0_0() { return cAnnotationsAnnotationDeclrParserRuleCall_0_0; }

		//declarations+=decl*
		public Assignment getDeclarationsAssignment_1() { return cDeclarationsAssignment_1; }

		//decl
		public RuleCall getDeclarationsDeclParserRuleCall_1_0() { return cDeclarationsDeclParserRuleCall_1_0; }
	}

	public class TypeNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "typeName");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//typeName:
		//	ID ("." ID)*;
		@Override public ParserRule getRule() { return rule; }

		//ID ("." ID)*
		public Group getGroup() { return cGroup; }

		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }

		//("." ID)*
		public Group getGroup_1() { return cGroup_1; }

		//"."
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }

		//ID
		public RuleCall getIDTerminalRuleCall_1_1() { return cIDTerminalRuleCall_1_1; }
	}

	public class DeclElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "decl");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cEnumDeclrParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cClassDeclrParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//decl:
		//	enumDeclr | classDeclr;
		@Override public ParserRule getRule() { return rule; }

		//enumDeclr | classDeclr
		public Alternatives getAlternatives() { return cAlternatives; }

		//enumDeclr
		public RuleCall getEnumDeclrParserRuleCall_0() { return cEnumDeclrParserRuleCall_0; }

		//classDeclr
		public RuleCall getClassDeclrParserRuleCall_1() { return cClassDeclrParserRuleCall_1; }
	}

	public class EnumDeclrElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "enumDeclr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEnumKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cTypeNameParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final RuleCall cIDTerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cCommaKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_4_1 = (RuleCall)cGroup_4.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//enumDeclr:
		//	"enum" typeName "{" ID ("," ID)* "}";
		@Override public ParserRule getRule() { return rule; }

		//"enum" typeName "{" ID ("," ID)* "}"
		public Group getGroup() { return cGroup; }

		//"enum"
		public Keyword getEnumKeyword_0() { return cEnumKeyword_0; }

		//typeName
		public RuleCall getTypeNameParserRuleCall_1() { return cTypeNameParserRuleCall_1; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//ID
		public RuleCall getIDTerminalRuleCall_3() { return cIDTerminalRuleCall_3; }

		//("," ID)*
		public Group getGroup_4() { return cGroup_4; }

		//","
		public Keyword getCommaKeyword_4_0() { return cCommaKeyword_4_0; }

		//ID
		public RuleCall getIDTerminalRuleCall_4_1() { return cIDTerminalRuleCall_4_1; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}

	public class ClassDeclrElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "classDeclr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cClassKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cTypeNameParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final RuleCall cClassParentDeclrParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cAnnotationsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cAnnotationsAnnotationDeclrParserRuleCall_4_0 = (RuleCall)cAnnotationsAssignment_4.eContents().get(0);
		private final Assignment cDeclarationsAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cDeclarationsClassElemDeclrParserRuleCall_5_0 = (RuleCall)cDeclarationsAssignment_5.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//classDeclr:
		//	"class" typeName classParentDeclr? "{" annotations+=annotationDeclr* declarations+=classElemDeclr* "}";
		@Override public ParserRule getRule() { return rule; }

		//"class" typeName classParentDeclr? "{" annotations+=annotationDeclr* declarations+=classElemDeclr* "}"
		public Group getGroup() { return cGroup; }

		//"class"
		public Keyword getClassKeyword_0() { return cClassKeyword_0; }

		//typeName
		public RuleCall getTypeNameParserRuleCall_1() { return cTypeNameParserRuleCall_1; }

		//classParentDeclr?
		public RuleCall getClassParentDeclrParserRuleCall_2() { return cClassParentDeclrParserRuleCall_2; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }

		//annotations+=annotationDeclr*
		public Assignment getAnnotationsAssignment_4() { return cAnnotationsAssignment_4; }

		//annotationDeclr
		public RuleCall getAnnotationsAnnotationDeclrParserRuleCall_4_0() { return cAnnotationsAnnotationDeclrParserRuleCall_4_0; }

		//declarations+=classElemDeclr*
		public Assignment getDeclarationsAssignment_5() { return cDeclarationsAssignment_5; }

		//classElemDeclr
		public RuleCall getDeclarationsClassElemDeclrParserRuleCall_5_0() { return cDeclarationsClassElemDeclrParserRuleCall_5_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}

	public class ClassElemDeclrElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "classElemDeclr");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cAttributeDeclarationParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cReferenceDeclarationParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cDependencyDeclarationParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cInputDeclarationParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cOutputDeclarationParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		
		//classElemDeclr:
		//	attributeDeclaration | referenceDeclaration | dependencyDeclaration | inputDeclaration | outputDeclaration;
		@Override public ParserRule getRule() { return rule; }

		//attributeDeclaration | referenceDeclaration | dependencyDeclaration | inputDeclaration | outputDeclaration
		public Alternatives getAlternatives() { return cAlternatives; }

		//attributeDeclaration
		public RuleCall getAttributeDeclarationParserRuleCall_0() { return cAttributeDeclarationParserRuleCall_0; }

		//referenceDeclaration
		public RuleCall getReferenceDeclarationParserRuleCall_1() { return cReferenceDeclarationParserRuleCall_1; }

		//dependencyDeclaration
		public RuleCall getDependencyDeclarationParserRuleCall_2() { return cDependencyDeclarationParserRuleCall_2; }

		//inputDeclaration
		public RuleCall getInputDeclarationParserRuleCall_3() { return cInputDeclarationParserRuleCall_3; }

		//outputDeclaration
		public RuleCall getOutputDeclarationParserRuleCall_4() { return cOutputDeclarationParserRuleCall_4; }
	}

	public class ClassParentDeclrElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "classParentDeclr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cExtendsKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cTypeNameParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final RuleCall cTypeNameParserRuleCall_2_1 = (RuleCall)cGroup_2.eContents().get(1);
		
		//classParentDeclr:
		//	"extends" typeName ("," typeName)*;
		@Override public ParserRule getRule() { return rule; }

		//"extends" typeName ("," typeName)*
		public Group getGroup() { return cGroup; }

		//"extends"
		public Keyword getExtendsKeyword_0() { return cExtendsKeyword_0; }

		//typeName
		public RuleCall getTypeNameParserRuleCall_1() { return cTypeNameParserRuleCall_1; }

		//("," typeName)*
		public Group getGroup_2() { return cGroup_2; }

		//","
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }

		//typeName
		public RuleCall getTypeNameParserRuleCall_2_1() { return cTypeNameParserRuleCall_2_1; }
	}

	public class AttributeDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "attributeDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAttKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final RuleCall cAttributeTypeParserRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final RuleCall cAnnotationDeclrParserRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		
		//attributeDeclaration:
		//	"att" ID ":" attributeType annotationDeclr*;
		@Override public ParserRule getRule() { return rule; }

		//"att" ID ":" attributeType annotationDeclr*
		public Group getGroup() { return cGroup; }

		//"att"
		public Keyword getAttKeyword_0() { return cAttKeyword_0; }

		//ID
		public RuleCall getIDTerminalRuleCall_1() { return cIDTerminalRuleCall_1; }

		//":"
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }

		//attributeType
		public RuleCall getAttributeTypeParserRuleCall_3() { return cAttributeTypeParserRuleCall_3; }

		//annotationDeclr*
		public RuleCall getAnnotationDeclrParserRuleCall_4() { return cAnnotationDeclrParserRuleCall_4; }
	}

	public class AttributeTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "attributeType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cStringKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cDoubleKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cLongKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cContinuousKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cIntKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cBoolKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		private final RuleCall cTypeNameParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		
		//attributeType:
		//	"String" | "Double" | "Long" | "Continuous" | "Int" | "Bool" | typeName;
		@Override public ParserRule getRule() { return rule; }

		//"String" | "Double" | "Long" | "Continuous" | "Int" | "Bool" | typeName
		public Alternatives getAlternatives() { return cAlternatives; }

		//"String"
		public Keyword getStringKeyword_0() { return cStringKeyword_0; }

		//"Double"
		public Keyword getDoubleKeyword_1() { return cDoubleKeyword_1; }

		//"Long"
		public Keyword getLongKeyword_2() { return cLongKeyword_2; }

		//"Continuous"
		public Keyword getContinuousKeyword_3() { return cContinuousKeyword_3; }

		//"Int"
		public Keyword getIntKeyword_4() { return cIntKeyword_4; }

		//"Bool"
		public Keyword getBoolKeyword_5() { return cBoolKeyword_5; }

		//typeName
		public RuleCall getTypeNameParserRuleCall_6() { return cTypeNameParserRuleCall_6; }
	}

	public class ReferenceDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "referenceDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cRefKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final Keyword cRefKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final RuleCall cTypeNameParserRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final RuleCall cAnnotationDeclrParserRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		
		//referenceDeclaration:
		//	("ref" | "ref*") ID ":" typeName annotationDeclr*;
		@Override public ParserRule getRule() { return rule; }

		//("ref" | "ref*") ID ":" typeName annotationDeclr*
		public Group getGroup() { return cGroup; }

		//"ref" | "ref*"
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//"ref"
		public Keyword getRefKeyword_0_0() { return cRefKeyword_0_0; }

		//"ref*"
		public Keyword getRefKeyword_0_1() { return cRefKeyword_0_1; }

		//ID
		public RuleCall getIDTerminalRuleCall_1() { return cIDTerminalRuleCall_1; }

		//":"
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }

		//typeName
		public RuleCall getTypeNameParserRuleCall_3() { return cTypeNameParserRuleCall_3; }

		//annotationDeclr*
		public RuleCall getAnnotationDeclrParserRuleCall_4() { return cAnnotationDeclrParserRuleCall_4; }
	}

	public class DependencyDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dependencyDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDependencyKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final RuleCall cTypeNameParserRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		
		//dependencyDeclaration:
		//	"dependency" ID ":" typeName;
		@Override public ParserRule getRule() { return rule; }

		//"dependency" ID ":" typeName
		public Group getGroup() { return cGroup; }

		//"dependency"
		public Keyword getDependencyKeyword_0() { return cDependencyKeyword_0; }

		//ID
		public RuleCall getIDTerminalRuleCall_1() { return cIDTerminalRuleCall_1; }

		//":"
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }

		//typeName
		public RuleCall getTypeNameParserRuleCall_3() { return cTypeNameParserRuleCall_3; }
	}

	public class InputDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "inputDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cInputKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final RuleCall cSTRINGTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//inputDeclaration:
		//	"input" ID STRING;
		@Override public ParserRule getRule() { return rule; }

		//"input" ID STRING
		public Group getGroup() { return cGroup; }

		//"input"
		public Keyword getInputKeyword_0() { return cInputKeyword_0; }

		//ID
		public RuleCall getIDTerminalRuleCall_1() { return cIDTerminalRuleCall_1; }

		//STRING
		public RuleCall getSTRINGTerminalRuleCall_2() { return cSTRINGTerminalRuleCall_2; }
	}

	public class OutputDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "outputDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cOutputKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final RuleCall cAttributeTypeParserRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		
		//outputDeclaration:
		//	"output" ID ":" attributeType;
		@Override public ParserRule getRule() { return rule; }

		//"output" ID ":" attributeType
		public Group getGroup() { return cGroup; }

		//"output"
		public Keyword getOutputKeyword_0() { return cOutputKeyword_0; }

		//ID
		public RuleCall getIDTerminalRuleCall_1() { return cIDTerminalRuleCall_1; }

		//":"
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }

		//attributeType
		public RuleCall getAttributeTypeParserRuleCall_3() { return cAttributeTypeParserRuleCall_3; }
	}

	public class AnnotationDeclrElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "annotationDeclr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cWithKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final RuleCall cINTTerminalRuleCall_2_0 = (RuleCall)cAlternatives_2.eContents().get(0);
		private final RuleCall cSTRINGTerminalRuleCall_2_1 = (RuleCall)cAlternatives_2.eContents().get(1);
		
		//annotationDeclr:
		//	"with" ID (INT | STRING)?;
		@Override public ParserRule getRule() { return rule; }

		//"with" ID (INT | STRING)?
		public Group getGroup() { return cGroup; }

		//"with"
		public Keyword getWithKeyword_0() { return cWithKeyword_0; }

		//ID
		public RuleCall getIDTerminalRuleCall_1() { return cIDTerminalRuleCall_1; }

		//(INT | STRING)?
		public Alternatives getAlternatives_2() { return cAlternatives_2; }

		//INT
		public RuleCall getINTTerminalRuleCall_2_0() { return cINTTerminalRuleCall_2_0; }

		//STRING
		public RuleCall getSTRINGTerminalRuleCall_2_1() { return cSTRINGTerminalRuleCall_2_1; }
	}
	
	
	private final ModelElements pModel;
	private final TypeNameElements pTypeName;
	private final DeclElements pDecl;
	private final EnumDeclrElements pEnumDeclr;
	private final ClassDeclrElements pClassDeclr;
	private final ClassElemDeclrElements pClassElemDeclr;
	private final ClassParentDeclrElements pClassParentDeclr;
	private final AttributeDeclarationElements pAttributeDeclaration;
	private final AttributeTypeElements pAttributeType;
	private final ReferenceDeclarationElements pReferenceDeclaration;
	private final DependencyDeclarationElements pDependencyDeclaration;
	private final InputDeclarationElements pInputDeclaration;
	private final OutputDeclarationElements pOutputDeclaration;
	private final AnnotationDeclrElements pAnnotationDeclr;
	
	private final Grammar grammar;

	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public MetaModelGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pModel = new ModelElements();
		this.pTypeName = new TypeNameElements();
		this.pDecl = new DeclElements();
		this.pEnumDeclr = new EnumDeclrElements();
		this.pClassDeclr = new ClassDeclrElements();
		this.pClassElemDeclr = new ClassElemDeclrElements();
		this.pClassParentDeclr = new ClassParentDeclrElements();
		this.pAttributeDeclaration = new AttributeDeclarationElements();
		this.pAttributeType = new AttributeTypeElements();
		this.pReferenceDeclaration = new ReferenceDeclarationElements();
		this.pDependencyDeclaration = new DependencyDeclarationElements();
		this.pInputDeclaration = new InputDeclarationElements();
		this.pOutputDeclaration = new OutputDeclarationElements();
		this.pAnnotationDeclr = new AnnotationDeclrElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.kevoree.modeling.MetaModel".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Model:
	//	annotations+=annotationDeclr* declarations+=decl*;
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}

	//typeName:
	//	ID ("." ID)*;
	public TypeNameElements getTypeNameAccess() {
		return pTypeName;
	}
	
	public ParserRule getTypeNameRule() {
		return getTypeNameAccess().getRule();
	}

	//decl:
	//	enumDeclr | classDeclr;
	public DeclElements getDeclAccess() {
		return pDecl;
	}
	
	public ParserRule getDeclRule() {
		return getDeclAccess().getRule();
	}

	//enumDeclr:
	//	"enum" typeName "{" ID ("," ID)* "}";
	public EnumDeclrElements getEnumDeclrAccess() {
		return pEnumDeclr;
	}
	
	public ParserRule getEnumDeclrRule() {
		return getEnumDeclrAccess().getRule();
	}

	//classDeclr:
	//	"class" typeName classParentDeclr? "{" annotations+=annotationDeclr* declarations+=classElemDeclr* "}";
	public ClassDeclrElements getClassDeclrAccess() {
		return pClassDeclr;
	}
	
	public ParserRule getClassDeclrRule() {
		return getClassDeclrAccess().getRule();
	}

	//classElemDeclr:
	//	attributeDeclaration | referenceDeclaration | dependencyDeclaration | inputDeclaration | outputDeclaration;
	public ClassElemDeclrElements getClassElemDeclrAccess() {
		return pClassElemDeclr;
	}
	
	public ParserRule getClassElemDeclrRule() {
		return getClassElemDeclrAccess().getRule();
	}

	//classParentDeclr:
	//	"extends" typeName ("," typeName)*;
	public ClassParentDeclrElements getClassParentDeclrAccess() {
		return pClassParentDeclr;
	}
	
	public ParserRule getClassParentDeclrRule() {
		return getClassParentDeclrAccess().getRule();
	}

	//attributeDeclaration:
	//	"att" ID ":" attributeType annotationDeclr*;
	public AttributeDeclarationElements getAttributeDeclarationAccess() {
		return pAttributeDeclaration;
	}
	
	public ParserRule getAttributeDeclarationRule() {
		return getAttributeDeclarationAccess().getRule();
	}

	//attributeType:
	//	"String" | "Double" | "Long" | "Continuous" | "Int" | "Bool" | typeName;
	public AttributeTypeElements getAttributeTypeAccess() {
		return pAttributeType;
	}
	
	public ParserRule getAttributeTypeRule() {
		return getAttributeTypeAccess().getRule();
	}

	//referenceDeclaration:
	//	("ref" | "ref*") ID ":" typeName annotationDeclr*;
	public ReferenceDeclarationElements getReferenceDeclarationAccess() {
		return pReferenceDeclaration;
	}
	
	public ParserRule getReferenceDeclarationRule() {
		return getReferenceDeclarationAccess().getRule();
	}

	//dependencyDeclaration:
	//	"dependency" ID ":" typeName;
	public DependencyDeclarationElements getDependencyDeclarationAccess() {
		return pDependencyDeclaration;
	}
	
	public ParserRule getDependencyDeclarationRule() {
		return getDependencyDeclarationAccess().getRule();
	}

	//inputDeclaration:
	//	"input" ID STRING;
	public InputDeclarationElements getInputDeclarationAccess() {
		return pInputDeclaration;
	}
	
	public ParserRule getInputDeclarationRule() {
		return getInputDeclarationAccess().getRule();
	}

	//outputDeclaration:
	//	"output" ID ":" attributeType;
	public OutputDeclarationElements getOutputDeclarationAccess() {
		return pOutputDeclaration;
	}
	
	public ParserRule getOutputDeclarationRule() {
		return getOutputDeclarationAccess().getRule();
	}

	//annotationDeclr:
	//	"with" ID (INT | STRING)?;
	public AnnotationDeclrElements getAnnotationDeclrAccess() {
		return pAnnotationDeclr;
	}
	
	public ParserRule getAnnotationDeclrRule() {
		return getAnnotationDeclrAccess().getRule();
	}

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" . / * 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' * / | !("\\" | "\""))* "\"" | "\'" ("\\" .
	//	/ * 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' * / | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}

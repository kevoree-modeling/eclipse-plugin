/*
 * generated by Xtext
 */
package org.kevoree.modeling.serializer;

import com.google.inject.Inject;
import java.util.List;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.IGrammarAccess;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.nodemodel.INode;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AbstractElementAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.TokenAlias;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynNavigable;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynTransition;
import org.eclipse.xtext.serializer.sequencer.AbstractSyntacticSequencer;
import org.kevoree.modeling.services.MetaModelGrammarAccess;

@SuppressWarnings("all")
public class MetaModelSyntacticSequencer extends AbstractSyntacticSequencer {

	protected MetaModelGrammarAccess grammarAccess;
	protected AbstractElementAlias match_classDeclr_ClassParentDeclrParserRuleCall_2_q;
	
	@Inject
	protected void init(IGrammarAccess access) {
		grammarAccess = (MetaModelGrammarAccess) access;
		match_classDeclr_ClassParentDeclrParserRuleCall_2_q = new TokenAlias(false, true, grammarAccess.getClassDeclrAccess().getClassParentDeclrParserRuleCall_2());
	}
	
	@Override
	protected String getUnassignedRuleCallToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if(ruleCall.getRule() == grammarAccess.getClassParentDeclrRule())
			return getclassParentDeclrToken(semanticObject, ruleCall, node);
		else if(ruleCall.getRule() == grammarAccess.getEnumDeclrRule())
			return getenumDeclrToken(semanticObject, ruleCall, node);
		else if(ruleCall.getRule() == grammarAccess.getTypeNameRule())
			return gettypeNameToken(semanticObject, ruleCall, node);
		return "";
	}
	
	/**
	 * classParentDeclr : 'extends' typeName (',' typeName )*;
	 */
	protected String getclassParentDeclrToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "extends";
	}
	
	/**
	 * enumDeclr : 'enum' typeName '{' ID (',' ID)* '}';
	 */
	protected String getenumDeclrToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "enum{}";
	}
	
	/**
	 * typeName : ID ('.' ID)*;
	 */
	protected String gettypeNameToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "";
	}
	
	@Override
	protected void emitUnassignedTokens(EObject semanticObject, ISynTransition transition, INode fromNode, INode toNode) {
		if (transition.getAmbiguousSyntaxes().isEmpty()) return;
		List<INode> transitionNodes = collectNodes(fromNode, toNode);
		for (AbstractElementAlias syntax : transition.getAmbiguousSyntaxes()) {
			List<INode> syntaxNodes = getNodesFor(transitionNodes, syntax);
			if(match_classDeclr_ClassParentDeclrParserRuleCall_2_q.equals(syntax))
				emit_classDeclr_ClassParentDeclrParserRuleCall_2_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else acceptNodes(getLastNavigableState(), syntaxNodes);
		}
	}

	/**
	 * Ambiguous syntax:
	 *     classParentDeclr?
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) 'class' typeName (ambiguity) '{' '}' (rule start)
	 *     (rule start) 'class' typeName (ambiguity) '{' annotations+=annotationDeclr
	 *     (rule start) 'class' typeName (ambiguity) '{' declarations+=classElemDeclr
	 */
	protected void emit_classDeclr_ClassParentDeclrParserRuleCall_2_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
}

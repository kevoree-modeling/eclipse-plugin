/*
 * generated by Xtext
 */
grammar InternalMetaModel;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package org.kevoree.modeling.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.kevoree.modeling.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.kevoree.modeling.services.MetaModelGrammarAccess;

}

@parser::members {

 	private MetaModelGrammarAccess grammarAccess;
 	
    public InternalMetaModelParser(TokenStream input, MetaModelGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "Model";	
   	}
   	
   	@Override
   	protected MetaModelGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleModel
entryRuleModel returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getModelRule()); }
	 iv_ruleModel=ruleModel 
	 { $current=$iv_ruleModel.current; } 
	 EOF 
;

// Rule Model
ruleModel returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getModelAccess().getAnnotationsAnnotationDeclrParserRuleCall_0_0()); 
	    }
		lv_annotations_0_0=ruleannotationDeclr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getModelRule());
	        }
       		add(
       			$current, 
       			"annotations",
        		lv_annotations_0_0, 
        		"annotationDeclr");
	        afterParserOrEnumRuleCall();
	    }

)
)*(
(
		{ 
	        newCompositeNode(grammarAccess.getModelAccess().getDeclarationsDeclParserRuleCall_1_0()); 
	    }
		lv_declarations_1_0=ruledecl		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getModelRule());
	        }
       		add(
       			$current, 
       			"declarations",
        		lv_declarations_1_0, 
        		"decl");
	        afterParserOrEnumRuleCall();
	    }

)
)*)
;





// Entry rule entryRuletypeName
entryRuletypeName returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getTypeNameRule()); } 
	 iv_ruletypeName=ruletypeName 
	 { $current=$iv_ruletypeName.current.getText(); }  
	 EOF 
;

// Rule typeName
ruletypeName returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(    this_ID_0=RULE_ID    {
		$current.merge(this_ID_0);
    }

    { 
    newLeafNode(this_ID_0, grammarAccess.getTypeNameAccess().getIDTerminalRuleCall_0()); 
    }
(
	kw='.' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getTypeNameAccess().getFullStopKeyword_1_0()); 
    }
    this_ID_2=RULE_ID    {
		$current.merge(this_ID_2);
    }

    { 
    newLeafNode(this_ID_2, grammarAccess.getTypeNameAccess().getIDTerminalRuleCall_1_1()); 
    }
)*)
    ;





// Entry rule entryRuledecl
entryRuledecl returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getDeclRule()); }
	 iv_ruledecl=ruledecl 
	 { $current=$iv_ruledecl.current; } 
	 EOF 
;

// Rule decl
ruledecl returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getDeclAccess().getEnumDeclrParserRuleCall_0()); 
    }
ruleenumDeclr
    { 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getDeclAccess().getClassDeclrParserRuleCall_1()); 
    }
    this_classDeclr_1=ruleclassDeclr
    { 
        $current = $this_classDeclr_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleenumDeclr
entryRuleenumDeclr returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getEnumDeclrRule()); } 
	 iv_ruleenumDeclr=ruleenumDeclr 
	 { $current=$iv_ruleenumDeclr.current.getText(); }  
	 EOF 
;

// Rule enumDeclr
ruleenumDeclr returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='enum' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getEnumDeclrAccess().getEnumKeyword_0()); 
    }

    { 
        newCompositeNode(grammarAccess.getEnumDeclrAccess().getTypeNameParserRuleCall_1()); 
    }
    this_typeName_1=ruletypeName    {
		$current.merge(this_typeName_1);
    }

    { 
        afterParserOrEnumRuleCall();
    }

	kw='{' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getEnumDeclrAccess().getLeftCurlyBracketKeyword_2()); 
    }
    this_ID_3=RULE_ID    {
		$current.merge(this_ID_3);
    }

    { 
    newLeafNode(this_ID_3, grammarAccess.getEnumDeclrAccess().getIDTerminalRuleCall_3()); 
    }
(
	kw=',' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getEnumDeclrAccess().getCommaKeyword_4_0()); 
    }
    this_ID_5=RULE_ID    {
		$current.merge(this_ID_5);
    }

    { 
    newLeafNode(this_ID_5, grammarAccess.getEnumDeclrAccess().getIDTerminalRuleCall_4_1()); 
    }
)*
	kw='}' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getEnumDeclrAccess().getRightCurlyBracketKeyword_5()); 
    }
)
    ;





// Entry rule entryRuleclassDeclr
entryRuleclassDeclr returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getClassDeclrRule()); }
	 iv_ruleclassDeclr=ruleclassDeclr 
	 { $current=$iv_ruleclassDeclr.current; } 
	 EOF 
;

// Rule classDeclr
ruleclassDeclr returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='class' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getClassDeclrAccess().getClassKeyword_0());
    }

    { 
        newCompositeNode(grammarAccess.getClassDeclrAccess().getTypeNameParserRuleCall_1()); 
    }
ruletypeName
    { 
        afterParserOrEnumRuleCall();
    }
(
    { 
        newCompositeNode(grammarAccess.getClassDeclrAccess().getClassParentDeclrParserRuleCall_2()); 
    }
ruleclassParentDeclr
    { 
        afterParserOrEnumRuleCall();
    }
)?	otherlv_3='{' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getClassDeclrAccess().getLeftCurlyBracketKeyword_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getClassDeclrAccess().getAnnotationsAnnotationDeclrParserRuleCall_4_0()); 
	    }
		lv_annotations_4_0=ruleannotationDeclr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getClassDeclrRule());
	        }
       		add(
       			$current, 
       			"annotations",
        		lv_annotations_4_0, 
        		"annotationDeclr");
	        afterParserOrEnumRuleCall();
	    }

)
)*(
(
		{ 
	        newCompositeNode(grammarAccess.getClassDeclrAccess().getDeclarationsClassElemDeclrParserRuleCall_5_0()); 
	    }
		lv_declarations_5_0=ruleclassElemDeclr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getClassDeclrRule());
	        }
       		add(
       			$current, 
       			"declarations",
        		lv_declarations_5_0, 
        		"classElemDeclr");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_6='}' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getClassDeclrAccess().getRightCurlyBracketKeyword_6());
    }
)
;





// Entry rule entryRuleclassElemDeclr
entryRuleclassElemDeclr returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getClassElemDeclrRule()); } 
	 iv_ruleclassElemDeclr=ruleclassElemDeclr 
	 { $current=$iv_ruleclassElemDeclr.current.getText(); }  
	 EOF 
;

// Rule classElemDeclr
ruleclassElemDeclr returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getClassElemDeclrAccess().getAttributeDeclarationParserRuleCall_0()); 
    }
    this_attributeDeclaration_0=ruleattributeDeclaration    {
		$current.merge(this_attributeDeclaration_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getClassElemDeclrAccess().getReferenceDeclarationParserRuleCall_1()); 
    }
    this_referenceDeclaration_1=rulereferenceDeclaration    {
		$current.merge(this_referenceDeclaration_1);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getClassElemDeclrAccess().getDependencyDeclarationParserRuleCall_2()); 
    }
    this_dependencyDeclaration_2=ruledependencyDeclaration    {
		$current.merge(this_dependencyDeclaration_2);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getClassElemDeclrAccess().getInputDeclarationParserRuleCall_3()); 
    }
    this_inputDeclaration_3=ruleinputDeclaration    {
		$current.merge(this_inputDeclaration_3);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getClassElemDeclrAccess().getOutputDeclarationParserRuleCall_4()); 
    }
    this_outputDeclaration_4=ruleoutputDeclaration    {
		$current.merge(this_outputDeclaration_4);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)
    ;





// Entry rule entryRuleclassParentDeclr
entryRuleclassParentDeclr returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getClassParentDeclrRule()); } 
	 iv_ruleclassParentDeclr=ruleclassParentDeclr 
	 { $current=$iv_ruleclassParentDeclr.current.getText(); }  
	 EOF 
;

// Rule classParentDeclr
ruleclassParentDeclr returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='extends' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getClassParentDeclrAccess().getExtendsKeyword_0()); 
    }

    { 
        newCompositeNode(grammarAccess.getClassParentDeclrAccess().getTypeNameParserRuleCall_1()); 
    }
    this_typeName_1=ruletypeName    {
		$current.merge(this_typeName_1);
    }

    { 
        afterParserOrEnumRuleCall();
    }
(
	kw=',' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getClassParentDeclrAccess().getCommaKeyword_2_0()); 
    }

    { 
        newCompositeNode(grammarAccess.getClassParentDeclrAccess().getTypeNameParserRuleCall_2_1()); 
    }
    this_typeName_3=ruletypeName    {
		$current.merge(this_typeName_3);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)*)
    ;





// Entry rule entryRuleattributeDeclaration
entryRuleattributeDeclaration returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getAttributeDeclarationRule()); } 
	 iv_ruleattributeDeclaration=ruleattributeDeclaration 
	 { $current=$iv_ruleattributeDeclaration.current.getText(); }  
	 EOF 
;

// Rule attributeDeclaration
ruleattributeDeclaration returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='att' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getAttributeDeclarationAccess().getAttKeyword_0()); 
    }
    this_ID_1=RULE_ID    {
		$current.merge(this_ID_1);
    }

    { 
    newLeafNode(this_ID_1, grammarAccess.getAttributeDeclarationAccess().getIDTerminalRuleCall_1()); 
    }

	kw=':' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getAttributeDeclarationAccess().getColonKeyword_2()); 
    }

    { 
        newCompositeNode(grammarAccess.getAttributeDeclarationAccess().getAttributeTypeParserRuleCall_3()); 
    }
    this_attributeType_3=ruleattributeType    {
		$current.merge(this_attributeType_3);
    }

    { 
        afterParserOrEnumRuleCall();
    }
(
    { 
        newCompositeNode(grammarAccess.getAttributeDeclarationAccess().getAnnotationDeclrParserRuleCall_4()); 
    }
    this_annotationDeclr_4=ruleannotationDeclr    {
		$current.merge(this_annotationDeclr_4);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)*)
    ;





// Entry rule entryRuleattributeType
entryRuleattributeType returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getAttributeTypeRule()); } 
	 iv_ruleattributeType=ruleattributeType 
	 { $current=$iv_ruleattributeType.current.getText(); }  
	 EOF 
;

// Rule attributeType
ruleattributeType returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='String' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getAttributeTypeAccess().getStringKeyword_0()); 
    }

    |
	kw='Double' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getAttributeTypeAccess().getDoubleKeyword_1()); 
    }

    |
	kw='Long' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getAttributeTypeAccess().getLongKeyword_2()); 
    }

    |
	kw='Continuous' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getAttributeTypeAccess().getContinuousKeyword_3()); 
    }

    |
	kw='Int' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getAttributeTypeAccess().getIntKeyword_4()); 
    }

    |
	kw='Bool' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getAttributeTypeAccess().getBoolKeyword_5()); 
    }

    |
    { 
        newCompositeNode(grammarAccess.getAttributeTypeAccess().getTypeNameParserRuleCall_6()); 
    }
    this_typeName_6=ruletypeName    {
		$current.merge(this_typeName_6);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)
    ;





// Entry rule entryRulereferenceDeclaration
entryRulereferenceDeclaration returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getReferenceDeclarationRule()); } 
	 iv_rulereferenceDeclaration=rulereferenceDeclaration 
	 { $current=$iv_rulereferenceDeclaration.current.getText(); }  
	 EOF 
;

// Rule referenceDeclaration
rulereferenceDeclaration returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	kw='ref' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getReferenceDeclarationAccess().getRefKeyword_0_0()); 
    }

    |
	kw='ref*' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getReferenceDeclarationAccess().getRefKeyword_0_1()); 
    }
)    this_ID_2=RULE_ID    {
		$current.merge(this_ID_2);
    }

    { 
    newLeafNode(this_ID_2, grammarAccess.getReferenceDeclarationAccess().getIDTerminalRuleCall_1()); 
    }

	kw=':' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getReferenceDeclarationAccess().getColonKeyword_2()); 
    }

    { 
        newCompositeNode(grammarAccess.getReferenceDeclarationAccess().getTypeNameParserRuleCall_3()); 
    }
    this_typeName_4=ruletypeName    {
		$current.merge(this_typeName_4);
    }

    { 
        afterParserOrEnumRuleCall();
    }
(
    { 
        newCompositeNode(grammarAccess.getReferenceDeclarationAccess().getAnnotationDeclrParserRuleCall_4()); 
    }
    this_annotationDeclr_5=ruleannotationDeclr    {
		$current.merge(this_annotationDeclr_5);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)*)
    ;





// Entry rule entryRuledependencyDeclaration
entryRuledependencyDeclaration returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getDependencyDeclarationRule()); } 
	 iv_ruledependencyDeclaration=ruledependencyDeclaration 
	 { $current=$iv_ruledependencyDeclaration.current.getText(); }  
	 EOF 
;

// Rule dependencyDeclaration
ruledependencyDeclaration returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='dependency' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getDependencyDeclarationAccess().getDependencyKeyword_0()); 
    }
    this_ID_1=RULE_ID    {
		$current.merge(this_ID_1);
    }

    { 
    newLeafNode(this_ID_1, grammarAccess.getDependencyDeclarationAccess().getIDTerminalRuleCall_1()); 
    }

	kw=':' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getDependencyDeclarationAccess().getColonKeyword_2()); 
    }

    { 
        newCompositeNode(grammarAccess.getDependencyDeclarationAccess().getTypeNameParserRuleCall_3()); 
    }
    this_typeName_3=ruletypeName    {
		$current.merge(this_typeName_3);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)
    ;





// Entry rule entryRuleinputDeclaration
entryRuleinputDeclaration returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getInputDeclarationRule()); } 
	 iv_ruleinputDeclaration=ruleinputDeclaration 
	 { $current=$iv_ruleinputDeclaration.current.getText(); }  
	 EOF 
;

// Rule inputDeclaration
ruleinputDeclaration returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='input' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getInputDeclarationAccess().getInputKeyword_0()); 
    }
    this_ID_1=RULE_ID    {
		$current.merge(this_ID_1);
    }

    { 
    newLeafNode(this_ID_1, grammarAccess.getInputDeclarationAccess().getIDTerminalRuleCall_1()); 
    }
    this_STRING_2=RULE_STRING    {
		$current.merge(this_STRING_2);
    }

    { 
    newLeafNode(this_STRING_2, grammarAccess.getInputDeclarationAccess().getSTRINGTerminalRuleCall_2()); 
    }
)
    ;





// Entry rule entryRuleoutputDeclaration
entryRuleoutputDeclaration returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getOutputDeclarationRule()); } 
	 iv_ruleoutputDeclaration=ruleoutputDeclaration 
	 { $current=$iv_ruleoutputDeclaration.current.getText(); }  
	 EOF 
;

// Rule outputDeclaration
ruleoutputDeclaration returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='output' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOutputDeclarationAccess().getOutputKeyword_0()); 
    }
    this_ID_1=RULE_ID    {
		$current.merge(this_ID_1);
    }

    { 
    newLeafNode(this_ID_1, grammarAccess.getOutputDeclarationAccess().getIDTerminalRuleCall_1()); 
    }

	kw=':' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOutputDeclarationAccess().getColonKeyword_2()); 
    }

    { 
        newCompositeNode(grammarAccess.getOutputDeclarationAccess().getAttributeTypeParserRuleCall_3()); 
    }
    this_attributeType_3=ruleattributeType    {
		$current.merge(this_attributeType_3);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)
    ;





// Entry rule entryRuleannotationDeclr
entryRuleannotationDeclr returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getAnnotationDeclrRule()); } 
	 iv_ruleannotationDeclr=ruleannotationDeclr 
	 { $current=$iv_ruleannotationDeclr.current.getText(); }  
	 EOF 
;

// Rule annotationDeclr
ruleannotationDeclr returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='with' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getAnnotationDeclrAccess().getWithKeyword_0()); 
    }
    this_ID_1=RULE_ID    {
		$current.merge(this_ID_1);
    }

    { 
    newLeafNode(this_ID_1, grammarAccess.getAnnotationDeclrAccess().getIDTerminalRuleCall_1()); 
    }
(    this_INT_2=RULE_INT    {
		$current.merge(this_INT_2);
    }

    { 
    newLeafNode(this_INT_2, grammarAccess.getAnnotationDeclrAccess().getINTTerminalRuleCall_2_0()); 
    }

    |    this_STRING_3=RULE_STRING    {
		$current.merge(this_STRING_3);
    }

    { 
    newLeafNode(this_STRING_3, grammarAccess.getAnnotationDeclrAccess().getSTRINGTerminalRuleCall_2_1()); 
    }
)?)
    ;





RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


